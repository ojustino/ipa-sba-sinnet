name: notebook-pep8-check
on:
  pull_request:
    branches:
      - main
    paths:
      - 'notebooks/*/*.ipynb' # in jdat_notebooks
      - 'jdat_notebooks/*/*.ipynb' # in dat_pyinthesky
      - 'nb_zone/*' # in proof-of-concept
    types: [ labeled, opened, synchronize, reopened ]

# ONLY WORKS if the PR and base/target branches belong to the same remote as the
# main repository. See branch `main` for a solution that works for forks.

# looks like either each folder needs its own job or pull requests need to be
# limited to one folder at a time, otherwise requirements files will be mixed.

env:
  pep8_script: '.github/helpers/pep8_nb_checker.py'
  flake8_runner: '.github/helpers/run_flake8.sh'
  bot_name: 'github-actions[bot]' # still must set this manually in conditional
  bot_email: '41898282+github-actions[bot]@users.noreply.github.com'

jobs:
  do-notebook-pep8-check:
    if: |
     contains(github.event.pull_request.labels.*.name, 'Technical Review') &&
     github.event.pull_request.head.user.login != 'github-actions[bot]' &&
     github.event.pull_request.draft == false &&
     github.event.pull_request.state == 'open'

    runs-on: ubuntu-18.04

    steps:
      - name: Event familiarization
        run: |
          echo "---github.event.pull_request.draft---"
          echo ${{ github.event.pull_request.draft }}

          echo "---github.event.pull_request.state---"
          echo ${{ github.event.pull_request.state }}

          echo "---contains(github.event.pull_request.labels.*.name, 'Technical Review')---"
          echo ${{ contains(github.event.pull_request.labels.*.name, 'Technical Review') }}

          echo "---github.event.pull_request.user.login---"
          echo ${{ github.event.pull_request.user.login }}

          echo "---github.event.pull_request.author_association---"
          echo ${{ github.event.pull_request.author_association }}

          echo "---github.event.pull_request.head.ref---"
          echo ${{ github.event.pull_request.head.ref }}

          echo "---github.event.pull_request.head.sha---"
          echo ${{ github.event.pull_request.head.sha }}

          echo "---github.event.pull_request.base.ref---"
          echo ${{ github.event.pull_request.base.ref }}

          echo "---github.event.pull_request.base.sha---"
          echo ${{ github.event.pull_request.base.sha }}

          echo "---github.event.action---"
          echo ${{ github.event.action }}

          echo "---github.event.sender.login---"
          echo ${{ github.event.sender.login }}

      - name: Check out PR branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          # is there any case where refs/pull/PR-NUMBER/head makes more sense?
          fetch-depth: 101 # open to other numbers
          # token: needed?
          # persist-credentials: true

      - name: Get changed files
        run: |
          # make an array of all files added/copied/modified in the PR branch

          git_diff=$(git diff --name-only --diff-filter=ACM ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "git_diff"
          echo $git_diff

          # (yes to added, copied, modified and NO to renamed, deleted, type changed, unmerged, or unknown seems reasonable.)

          changed_files=($(printf '%s\n' $git_diff))
          echo "changed_files"
          echo "${changed_files[@]}"
          echo "changed_files=${changed_files[@]}" >> $GITHUB_ENV

          # use arrays to check that all changed files are in the same directory
          # https://unix.stackexchange.com/a/377820

          changed_dirs_all=( $(printf '%s\n' "${changed_files[@]}" | xargs dirname) )
          echo "changed_dirs_all"
          echo "${changed_dirs_all[@]}"
          changed_dirs_uniq=( $(printf '%s\n' "${changed_dirs_all[@]}" | sort -u) )
          echo "changed_dirs_uniq"
          echo "${changed_dirs_uniq[@]}"
          # ('%s\n' could be '%s.' or others depending on shell's $IFS value)

          if [ "${#changed_dirs_uniq[@]}" != 1 ]; then echo "one_dir=no" >> $GITHUB_ENV; fi

          # save requirements-like files from that directory
          req_files=($(find ${changed_dirs_uniq[0]} -name '*requirements.txt'))
          echo "req_files"
          echo "${req_files[@]}"
          echo "req_files=${req_files[@]}" >> $GITHUB_ENV

      - name: Auto-fail if changed files are not in same directory
        if: env.one_dir
        uses: actions/github-script@v3 # currently on v5
        with:
          script: |
            core.setFailed('All changed files are not in the same directory.')

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8 # which is best?

      - name: Install flake8 and Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==3.7.3 pycodestyle_magic numpy
          # (need numpy for the script; requirements can correct ver. # later)

          # install requirements files in order (hopefully)
          # https://stackoverflow.com/a/229606

          for ff in ${{ env.req_files }}; do
            if [[ $ff == *"pre-requirements.txt" ]]; then
              echo "---installing from $ff---";
              pip install -r $ff
            fi
          done

          for ff in ${{ env.req_files }}; do
            if [[ $ff == *"requirements.txt" ]] && \\
            [[ $ff != *"pre-requirements.txt" ]]; then
              echo "---installing from $ff---";
              pip install -r $ff
            fi
          done

      - name: Run the PEP8 check's Python script
        run: |
          # make flake8 sh file executable
          chmod +x ${{ env.flake8_runner }}

          # isolate changed notebooks in order to run PEP8 check

          for ff in ${{ env.changed_files }}; do
            # https://stackoverflow.com/a/6397979
            if [[ $ff == *".ipynb" ]]; then
              python ${{ env.pep8_script }} -f $ff;
            fi
          done

          # check for changes to the notebooks in this local branch
          if [[ `git status --porcelain --untracked-files=no` ]]; then echo "push=yes" >> $GITHUB_ENV; fi
        shell: bash

      # if env.push is empty, the next steps are skipped and the job should pass
      - name: Push any changes to PR
        if: env.push
        run: |
          # verify identity to allow a push to which other workflows can respond
          git config --local user.email $bot_email
          git config --local user.name $bot_name
          git remote set-url origin https://x-access-token:${{ secrets.XMAS_PARTY }}@github.com/${{ github.repository }}
          # (any permission issues if the ID'd party is not an owner?)

          # add the changed notebook(s)
          git add --update
          # seems safe; only NBs are modified. script output files are untracked
          git status

          # list changed notebooks in commit message; push the changes
          git_diff_new=($(git diff --name-only --diff-filter=M HEAD))
          git commit -m "[BOT] Left PEP8 feedback on PR #${{ github.event.number }}'s notebooks" -m "Files: $(printf '%s\n' $git_diff_new)"

          git push origin ${{ env.git_branch }}

          # NOTE: if there's a problem pushing to the branch, it might be because we've checked out refs/pull/PR-NUMBER/head instead of the author's branch. should i copy these steps i take locally?
          # git remote add author-remote "git@github.com:${{ github.event.pull_request.head.user.login }}/${{ github.event.repository.name }}.git"
          # git fetch author-remote ${{ github.event.pull_request.head.ref }}
          # git checkout -b bot-swana "author-remote/${{ github.event.pull_request.head.ref }}" # pre-PEP8 script
          # git push author-remote "HEAD:${{ github.event.pull_request.head.ref }}"

      # consider a marketplace action that gives access to GitHub's core API,
      # which includes a methods for auto-fail seen here
      # https://timheuer.com/blog/manually-force-a-failure-in-github-action-step/
      - name: Write instructional message (if new branch)
        if: env.push
        uses: actions/github-script@v5
        env:
          BOTNAME: "github-actions[bot]"
          # some of the following may not be necessary, but didn't see how to
          # get them working with github payload object...
          TEMPLATE: ".github/helpers/tech_review_instructions.md"
          ISSUENO: "${{ github.event.number }}"
          BRANCH: "${{ github.event.pull_request.head.ref }}"
          CREATOR: "${{ github.event.pull_request.user.login }}"
        with:
          script: |
            async function scanAndPost()
            {
              // scan PR comments (expecting JS array of JS lists)
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner, // as in account that owns the repo
                repo: context.repo.repo,
                issue_number: process.env.ISSUENO
              });
              console.log("imported comments")
              //console.log(comments.data[0].user);

              // see how many were written by the bot
              const botPosts = comments.data.filter(post => post.user.login === process.env.BOTNAME).length;

              // if any, terminate early
              if (botPosts != 0) { console.log("Already commented!"); return; }

              // else, read text from template file
              const fs = require("fs").promises;
              const message = await fs.readFile(process.env.TEMPLATE, "utf8");
              console.log("read file");

              // format message with user and PR info
              const util = require("util");
              const injectedMsg = util.format(message, process.env.CREATOR,
                                              process.env.BRANCH,
                                              process.env.BRANCH,
                                              process.env.CREATOR,
                                              context.repo.repo);
              console.log("formatted message");

              // create the comment
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: injectedMsg
              });
            }
            scanAndPost();

      - name: Auto-fail if changes were pushed
        if: env.push
        uses: actions/github-script@v3 # currently on v5
        with:
          script: core.setFailed('Notebook(s) failed PEP8 tests.')
