name: respond-to-pr
on:
  pull_request:
    branches:
      - main
    types: [ labeled, opened, synchronize, reopened ]

jobs:
  do-respond-to-pr:
    if: |
      contains(github.event.pull_request.labels.*.name, 'Talkie') &&
      github.event.pull_request.head.user.login != 'github-actions[bot]' &&
      github.event.pull_request.draft == false &&
      github.event.pull_request.state == 'open'

    runs-on: ubuntu-18.04

    steps:
      - name: Check out PR branch
        uses: actions/checkout@v2

      - name: Respond to PR
        uses: actions/github-script@v5
        env:
          BOTNAME: "github-actions[bot]"
          # some of the following may not be necessary, but didn't see how to
          # get them working with github payload object...
          TEMPLATE: ".github/helpers/tech_review_instructions.md"
          ISSUENO: "${{ github.event.number }}"
          BRANCH: "${{ github.event.pull_request.head.ref }}"
          CREATOR: "${{ github.event.pull_request.head.user.login }}"
        with:
          script: |
            async function scanAndPost()
            {
              // scan PR comments (expecting JS array of JS lists)
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner, // as in account that owns the repo
                repo: context.repo.repo,
                issue_number: process.env.ISSUENO
              });
              console.log("imported comments")
              //console.log(comments.data[0].user);

              // see how many were written by the bot
              const botPosts = comments.data.filter(post => post.user.login === process.env.BOTNAME).length;

              // if any, terminate early
              if (botPosts != 0) { console.log("Already commented!"); return; }

              // else, read text from template file
              const fs = require("fs").promises;
              const message = await fs.readFile(process.env.TEMPLATE, "utf8");
              console.log("read file");

              // format message with user and PR info
              const util = require("util");
              const injectedMsg = util.format(message, process.env.CREATOR,
                                              process.env.BRANCH,
                                              process.env.BRANCH,
                                              context.repo.repo);
              console.log("formatted message");

              // create the comment
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: injectedMsg
              });
            }
            scanAndPost();

